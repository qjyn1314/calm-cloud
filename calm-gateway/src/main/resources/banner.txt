${AnsiColor.BRIGHT_RED}
________/\\\\\\\\\_________________/\\\\\\________________________
 _____/\\\////////_________________\////\\\________________________
  ___/\\\/_____________________________\/\\\________________________
   __/\\\______________/\\\\\\\\\_______\/\\\_______/\\\\\__/\\\\\___
    _\/\\\_____________\////////\\\______\/\\\_____/\\\///\\\\\///\\\_
     _\//\\\______________/\\\\\\\\\\_____\/\\\____\/\\\_\//\\\__\/\\\_
      __\///\\\___________/\\\/////\\\_____\/\\\____\/\\\__\/\\\__\/\\\_
       ____\////\\\\\\\\\_\//\\\\\\\\/\\__/\\\\\\\\\_\/\\\__\/\\\__\/\\\_
        _______\/////////___\////////\//__\/////////__\///___\///___\///__

GateWay：
概念：
    路由：
        构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由
    断言：
        参考java8中的Predicate，开发人员可以匹配Http请求中的所有内容，如果请求与断言匹配则进行路由
    过滤：
        指spring框架中的一个GateWayFilter的实例，使用过滤器，可以在请求被路由之前或者之后进行修改
执行流程：
    客户端向GateWay发出请求，然后在GateWay Handle Mapping 中找到与请求相匹配的路径，将其发送到gateway web handle中，
 handle中再通过指定的过滤器链来请求我们的实际服务，执行逻辑并返回。
 其中filter在pre中可做参数效验，权限效验；在post中的类型过滤器中做响应内容，响应头的修改，日志的输出等。

 其核心逻辑就是：路由转发+过滤器

application-gateway.yml 为此工程的的gateway总配置文件

其中：
结点routes
id：是必须唯一的
uri：lb://访问的服务名称
predicates：匹配规则，即断言
参考官网：
https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gateway-request-predicates-factories
过滤器-filter：
https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories
全局过滤器：
https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#global-filters
${AnsiColor.BRIGHT_GREEN}
  ::: Project (version:${application.version}) :::        Spring-Boot ${spring-boot.version}
${AnsiColor.BRIGHT_BLACK}